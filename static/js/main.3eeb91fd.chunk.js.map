{"version":3,"sources":["components/Cards/Cards.module.css","components/Cards/Cards.jsx","Api/index.js","components/Country/Country.jsx","components/Chart/Chart.jsx","App.js","serviceWorker.js","index.js","App.module.css","components/Country/Country.module.css","components/Chart/Charts.module.css","image/image.png"],"names":["module","exports","Cards","data","confirmed","deaths","lastUpdate","recovered","className","styles","container","Grid","spacing","justify","item","component","Card","xs","md","cx","test","infected","CardContent","Typography","color","gutterBottom","style","variant","start","end","value","duration","seperator","Date","toDateString","width","height","display","justifyContent","alignItems","type","url","fetchData","country","a","changeUrl","axios","get","modifiedData","fetchDailyData","map","dailyData","total","date","reportDate","console","log","fetchCountries","countries","name","Country","handleCountry","useState","setCountries","useEffect","fetchAPI","FormControl","NativeSelect","defaultValue","onChange","e","target","formControl","index","key","Chart","setDailyData","lineChart","labels","datasets","label","borderColor","fill","backgroundColor","doughnut","options","legend","title","text","App","fetchedData","setState","state","this","image","src","alt","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.3eeb91fd.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__PYDJC\",\"card\":\"Cards_card__1V6oO\",\"infected\":\"Cards_infected__mQhXZ\",\"recovered\":\"Cards_recovered__2u8At\",\"deaths\":\"Cards_deaths__3id-m\"};","import React from 'react'\r\nimport {Card,CardContent, Typography, Grid} from '@material-ui/core'\r\nimport styles from './Cards.module.css'\r\nimport CountUp from 'react-countup'\r\nimport cx from 'classnames'\r\nimport Loader from 'react-loader-spinner';\r\n\r\nconst Cards=({data: {confirmed,deaths,lastUpdate,recovered}})=>{\r\n\tif(!confirmed){\r\n\t\treturn(\r\n    <div\r\n     style={{\r\n        width: \"100%\",\r\n        height: \"100\",\r\n        display: \"flex\",\r\n        justifyContent: \"center\",\r\n        alignItems: \"center\"\r\n      }}\r\n    >\r\n      <Loader type=\"ThreeDots\" color=\"white\" height=\"100\" width=\"100\" />\r\n    </div>\t\t\r\n    );\r\n\t} \r\n\r\n\treturn(\r\n\t\t<div className={styles.container}>\r\n\t\t\t<Grid container spacing={3} justify='center'>\r\n\t\t\t\t<Grid item component={Card} xs={12} md={3} className={cx(styles.test,styles.infected)}>\r\n\r\n\t\t\t\t\t<CardContent>\r\n\t\t\t\t\t\t<Typography color='textSecondary' gutterBottom><b style={{color:'blue'}}>Infected</b></Typography>\r\n\t\t\t\t\t\t<Typography variant='h5'>\r\n\t\t\t\t\t\t<CountUp start={0} end={confirmed.value} duration={2.5} seperator=','/>\r\n\t\t\t\t\t\t</Typography>\r\n\t\t\t\t\t\t<Typography color='textSecondary'>{new Date(lastUpdate).toDateString()}</Typography>\r\n\t\t\t\t\t\t<Typography variant='body2'>Number of Active Cases</Typography>\r\n\r\n\t\t\t\t\t</CardContent>\r\n\r\n\t\t\t\t</Grid>\r\n\r\n\t\t\t\t<Grid item component={Card} xs={12} md={3} className={cx(styles.test,styles.recovered)}>\r\n\t\t\t\t\t<CardContent>\r\n\t\t\t\t\t\t<Typography color='textSecondary' gutterBottom><b style={{color:'green'}}>Recovered</b></Typography>\r\n\t\t\t\t\t\t<Typography variant='h5'>\r\n\t\t\t\t\t\t<CountUp start={0} end={recovered.value} duration={2.5} seperator=','/>\r\n\t\t\t\t\t\t</Typography>\r\n\t\t\t\t\t\t<Typography color='textSecondary'>{new Date(lastUpdate).toDateString()}</Typography>\r\n\t\t\t\t\t\t<Typography variant='body2'>Number of Recovery Cases</Typography>\r\n\r\n\t\t\t\t\t</CardContent>\r\n\r\n\t\t\t\t</Grid>\r\n\r\n\t\t\t\t<Grid item component={Card} xs={12} md={3} className={cx(styles.test,styles.deaths)}>\r\n\t\t\t\t\t<CardContent>\r\n\t\t\t\t\t\t<Typography color='textSecondary' gutterBottom><b style={{color:'red'}}>Death</b></Typography>\r\n\t\t\t\t\t\t<Typography variant='h5'>\r\n\t\t\t\t\t\t<CountUp start={0} end={deaths.value} duration={2.5} seperator=','/>\r\n\t\t\t\t\t\t</Typography>\r\n\t\t\t\t\t\t<Typography color='textSecondary'>{new Date(lastUpdate).toDateString()}</Typography>\t\r\n\t\t\t\t\t\t<Typography variant='body2'>Number of Death Cases</Typography>\r\n\r\n\t\t\t\t\t</CardContent>\r\n\t\t\t\t\t</Grid>\r\n\t\t\t\t\r\n\t\t\t</Grid>\r\n\t\t</div>\r\n\t\t)\r\n\r\n}\r\n\r\nexport default Cards","import axios from 'axios'\r\n\r\nconst url = 'https:covid19.mathdro.id/api'\r\n\r\nexport const fetchData= async(country)=>{\r\n\tlet changeUrl = url\r\n\r\n\tif(country){\r\n\t\tchangeUrl = `${url}/countries/${country}`\r\n\t}\r\n\ttry{\r\n\t\tconst {data: {confirmed,deaths,lastUpdate,recovered}} = await axios.get(changeUrl)\r\n\t\tconst modifiedData ={\r\n\t\t\tconfirmed,\r\n\t\t\trecovered,\r\n\t\t\tdeaths,\r\n\t\t\tlastUpdate\r\n\r\n\t\t}\r\n\r\n\t\treturn modifiedData\r\n\t}\r\n\tcatch(error){\r\n\r\n\t}\r\n}\r\n\r\n\r\nexport const fetchDailyData = async()=>{\r\n\ttry{\r\n\t\tconst {data} = await axios.get(`${url}/daily`)\r\n\t\t\r\n\t\tconst modifiedData = data.map((dailyData)=>({\r\n\t\t\tconfirmed: dailyData.confirmed.total,\r\n\t\t\tdeaths: dailyData.deaths.total,\r\n\t\t\tdate:dailyData.reportDate\r\n\t\t}))\r\n\r\n\t\treturn modifiedData\r\n\t\t}\r\n\tcatch(error){\r\n\t\tconsole.log(error)\r\n\t}\r\n}\r\n\r\n\r\nexport const fetchCountries = async()=>{\r\n\ttry{\r\n\t\tconst { data:{ countries}} = await axios.get(`${url}/countries`)\r\n\r\n\t\treturn countries.map((country)=> country.name\r\n\t\t)\r\n\t}\r\n\tcatch(error){\r\n\t\tconsole.log(error)\r\n\t}\r\n}\r\n\r\n\r\n","import React,{useState,useEffect}from 'react'\r\nimport { NativeSelect, FormControl} from '@material-ui/core'\r\nimport styles from './Country.module.css' \r\nimport { fetchCountries} from '../../Api'\r\n\r\nconst Country=({handleCountry})=>{\r\n\tconst [countries, setCountries] = useState([])\r\n\t\r\n\tuseEffect(()=>{\r\n\t\tconst fetchAPI = async()=>{\r\n\t\t\tsetCountries(await fetchCountries())\r\n\t\t}\r\n\r\n\t\treturn fetchAPI()\r\n\r\n\t}, [])\r\n\r\n\treturn(\r\n\t\t<FormControl>\r\n\t\t<label><h2><strong>Select Country</strong></h2></label>\r\n\t\t\t<NativeSelect defaultValue='' onChange={(e)=>{handleCountry(e.target.value)}} className={styles.formControl}>\r\n\t\t\t\t<option value='global'>Global</option>\r\n\t\t\t\t{ countries.map((country,index) => \r\n\t\t\t\t\t<option key={index} value={country}> {country}</option>)}\r\n\t\t\t</NativeSelect>\r\n\t\t</FormControl>\t\r\n\t\t)\r\n\r\n}\r\n\r\nexport default Country","import React, {useState,useEffect} from 'react'\r\nimport { fetchDailyData} from '../../Api'\r\nimport { Line,Doughnut} from 'react-chartjs-2'\r\nimport styles from './Charts.module.css'\r\n\r\nconst Chart=({data:{confirmed,deaths,recovered}, country})=>{\r\n\tconst [dailyData, setDailyData] = useState({})\r\n\r\n\tuseEffect(()=>{\r\n\t\tconst fetchAPI = async ()=>{\r\n\t\t\tsetDailyData(await fetchDailyData());\r\n\t\t}\r\n\t\t\r\n\t\treturn fetchAPI()\t\t\r\n\t},[])\t\r\n\r\n\tconst lineChart =(\r\n\t\tdailyData[0] ? (\r\n\t\t\t<Line \r\n\t\t\tdata={{ \r\n\t\t\t\tlabels: dailyData.map(({ date }) => date),\r\n\t\t\t\tdatasets:[{\r\n\t\t\t\tdata: dailyData.map(({ confirmed }) => confirmed),\r\n\t\t\t\tlabel: \"Infected\",\r\n\t\t\t\tborderColor: '#3333ff',\r\n\t\t\t\tfill:true\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tdata: dailyData.map(({ deaths }) => deaths),\r\n\t\t\t\tlabel: \"Deaths\",\r\n\t\t\t\tborderColor: 'red',\r\n\t\t\t\tbackgroundColor:'rgba(255,0,0,0.5)',\r\n\t\t\t\tfill:true\r\n\t\t\t}], }}\r\n\t\t/>)\r\n\t\t\t: null\r\n\t\t)\r\n\r\n\tconst doughnut = (\r\n\r\n\t\t\tconfirmed ? \r\n\t\t\t(\r\n\t\t\t\t<Doughnut \r\n\t\t\t\t\tdata={{\r\n\t\t\t\t\t\tlabels:['Infected','Recovered', ' Deaths'],\r\n\t\t\t\t\t\tdatasets:[{\r\n\t\t\t\t\t\t\tlabel:\"People\",\r\n\t\t\t\t\t\t\tbackgroundColor:[\r\n\t\t\t\t\t\t\t'rgba(0, 0, 255, 0.5)',\r\n\t\t\t\t\t\t\t'rgba(0, 255, 0, 0.5)',\r\n\t\t\t\t\t\t\t'rgba(255, 0, 0, 0.5)'\r\n\t\t\t\t\t\t\t],\r\n\t\t\t\t\t\t\tdata:[confirmed.value,recovered.value,deaths.value]\r\n\t\t\t\t\t\t}]\r\n\t\t\t\t\t}}\r\n\r\n\t\t\t\t\toptions={{\r\n\t\t\t\t\t\tlegend:{display:false},\r\n\t\t\t\t\t\ttitle:{display:true, text:`Current state in ${country}`},\r\n\r\n\t\t\t\t\t}}\r\n\r\n\t\t\t\t/>\r\n\t\t\t): null\r\n\t\t)\r\n\r\n\r\n\treturn(\r\n\t\t<div className={styles.container}>\r\n\t\t\t{country ? doughnut : lineChart}\r\n\t\t</div>\r\n\t\t)\r\n\r\n}\r\n\r\nexport default Chart","import React from 'react';\r\n\r\nimport { Cards, Chart, Country } from './components'\r\nimport styles from './App.module.css'\r\nimport{ fetchData } from './Api'\r\nimport image from './image/image.png'\r\n\r\nclass App extends React.Component{\r\n  constructor(){\r\n    super()\r\n    this.state={\r\n      data:{},\r\n      country:''\r\n    }\r\n  }\r\n  async componentDidMount(){\r\n    const fetchedData = await fetchData()\r\n\r\n    this.setState({data:fetchedData})\r\n    console.log(this.state)\r\n  }\r\n\r\n  handleCountry = async(country)=>{\r\n    const fetchedData = await fetchData(country)\r\n    this.setState({ data: fetchedData, country:country})\r\n  }\r\n\r\n\r\n  render(){\r\n    const {data,country} = this.state\r\n\r\n  return (\r\n\r\n    <div className={styles.container}>\r\n      <img className={styles.image} src={image} alt='COVID-19' />\r\n      <h1 style={{ color:'red'}}>Make every effort to adhere to all <em>Protocols</em>.</h1>\r\n      <Cards data={data}/>\r\n\r\n        <Country handleCountry={this.handleCountry}/>\r\n        <Chart data={data} country={country}/>\r\n        \r\n    </div>\r\n  );\r\n}\r\n}\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__2zGX8\",\"image\":\"App_image__39Ci-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"Country_formControl__3Mizn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Charts_container__1PHif\"};","module.exports = __webpack_public_path__ + \"static/media/image.d7265326.png\";"],"sourceRoot":""}